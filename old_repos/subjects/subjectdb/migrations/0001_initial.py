# Generated by Django 2.2.1 on 2019-05-19 12:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('teacherSurname', models.CharField(blank=True, max_length=30)),
                ('teacherFirstName', models.CharField(blank=True, max_length=50)),
                ('teacherMI', models.CharField(blank=True, max_length=3)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student_t',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('studentSurname', models.CharField(max_length=30)),
                ('studentFirstName', models.CharField(max_length=50)),
                ('studentMI', models.CharField(max_length=3)),
            ],
            options={
                'verbose_name_plural': 'Students',
            },
        ),
        migrations.CreateModel(
            name='Subject_t',
            fields=[
                ('subjectID', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('yearLevel', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('subjectName', models.CharField(max_length=80)),
            ],
            options={
                'verbose_name_plural': 'Subjects',
            },
        ),
        migrations.CreateModel(
            name='Class_t',
            fields=[
                ('classID', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('section', models.CharField(max_length=20)),
                ('schoolYear', models.CharField(max_length=15)),
                ('subjectID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subjectdb.Subject_t')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Classes',
            },
        ),
        migrations.CreateModel(
            name='SubjTeachA_t',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('yearLevel', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('teacherAssigned', models.CharField(max_length=60)),
                ('subjectID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subjectdb.Subject_t')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Subject Teacher Assignments',
                'unique_together': {('subjectID', 'username')},
            },
        ),
        migrations.CreateModel(
            name='Grade_t',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Q1grade', models.PositiveIntegerField()),
                ('Q2grade', models.PositiveIntegerField()),
                ('Q3grade', models.PositiveIntegerField()),
                ('Q4grade', models.PositiveIntegerField()),
                ('finalGrade', models.PositiveIntegerField()),
                ('remark', models.CharField(max_length=20)),
                ('classID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subjectdb.Class_t')),
                ('studentID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subjectdb.Student_t')),
            ],
            options={
                'verbose_name_plural': 'Grades',
                'unique_together': {('classID', 'studentID')},
            },
        ),
    ]
